docker-compose up -d


"transforms.mongoflatten.type": "io.debezium.connector.mongodb.transforms.ExtractNewDocumentState",

## Loading data into Postgres

docker run -it --rm --network=poc-4-cdc_default \
         -v "$PWD":/home/config/Data \
         debezium/postgres:11 psql -h postgres -U postgres

Password = postgres

At the command line:

```
CREATE DATABASE students;
\connect students;
```

Load our admission data table:

```
CREATE TABLE admission
(student_id INTEGER, gre INTEGER, toefl INTEGER, cpga DOUBLE PRECISION, admit_chance DOUBLE PRECISION,
CONSTRAINT student_id_pk PRIMARY KEY (student_id));

\copy admission FROM '/home/config/Data/admit_1.csv' DELIMITER ',' CSV HEADER;
```

insert into admission values ( 12345, 98, 98, 0.09,0.87);
update admission set gre = 99 where student_id = 12345;
delete from admission where student_id = 12345;


Load the research data table with:

```
CREATE TABLE research
(student_id INTEGER, rating INTEGER, research INTEGER,
PRIMARY KEY (student_id));

\copy research FROM '/home/config/Data/research_1.csv' DELIMITER ',' CSV HEADER;
```


##if you want to create topic manually

docker-compose exec broker kafka-topics --create \
    --bootstrap-server localhost:9092 \
    --partitions 1 \
    --replication-factor 1 \
    --topic psg-admission


## Connect Postgres database as a source to Kafka
```
curl -X POST -H "Accept:application/json" -H "Content-Type: application/json" \
      --data @postgres-source.json http://localhost:8083/connectors
```


for showing connectors and its status
```
curl -H "Accept:application/json" localhost:8083/connectors/

curl localhost:8083/connectors/s3-connector/status
```
##for showing logs of connections if err exist or not
docker logs -f connect


The two tables in the `students` database will now show up as topics in Kafka.
You can check this by entering the Kafka container:

```
docker exec -it <kafka-container-id> /bin/bash
```

and listing the available topics:

```
/usr/bin/kafka-topics --list --zookeeper zookeeper:2181
```

```
/usr/bin/kafka-console-consumer --bootstrap-server broker0:19092 --topic demo.class.courses --from-beginning

```


## Create tables in KSQL

Bring up a KSQL server command line client as a container:

```
docker-compose exec ksqldb-cli ksql http://ksqldb-server:8088 

                          or

docker run --network postgres-kafka-demo_default \
           --interactive --tty --rm \
           confluentinc/cp-ksql-cli:latest \
           http://ksql-server:8088
```

To see your updates, a few settings need to be configured by first running:

```
set 'commit.interval.ms'='2000';
set 'cache.max.bytes.buffering'='10000000';
set 'auto.offset.reset'='earliest';
```

### Mirror Postgres tables

The Postgres table topics will be visible in KSQL, and we will create
KSQL streams to auto update KSQL tables mirroring the Postgres tables:

```
SHOW TOPICS;

print 'topic' from beginning;

CREATE STREAM admission_src (student_id INTEGER, gre INTEGER, toefl INTEGER, cpga DOUBLE, admit_chance DOUBLE)\
WITH (KAFKA_TOPIC='dbserver1.public.admission', VALUE_FORMAT='AVRO');

#create stream courses_src (course_id INTEGER, course_name STRING) WITH (KAFKA_TOPIC='demo.mydb.courses', VALUE_FORMAT='AVRO');

select * from admission_src emit changes;


##for table joining reason we have to partition data by student_id

CREATE STREAM admission_src_rekey WITH (PARTITIONS=1) AS \
SELECT * FROM admission_src PARTITION BY student_id;

SHOW STREAMS;

##it will also create new table nd topic named ADMISSION_SRC_REKEY

CREATE TABLE admission (student_id INTEGER PRIMARY KEY, gre INTEGER, toefl INTEGER, cpga DOUBLE, admit_chance DOUBLE)\
WITH (KAFKA_TOPIC='ADMISSION_SRC_REKEY', VALUE_FORMAT='AVRO');

SHOW TABLES;

CREATE STREAM research_src (student_id INTEGER, rating INTEGER, research INTEGER)\
WITH (KAFKA_TOPIC='local.students.research', VALUE_FORMAT='AVRO');

CREATE STREAM research_src_rekey WITH (PARTITIONS=1) AS \
SELECT * FROM research_src PARTITION BY student_id;

CREATE TABLE research (student_id INTEGER PRIMARY KEY, rating INTEGER, research INTEGER)\
WITH (KAFKA_TOPIC='RESEARCH_SRC_REKEY', VALUE_FORMAT='AVRO');
```

Currently KSQL uses uppercase casing convention for stream, table, and field
names.

### Create downstream tables

We will create a new KSQL streaming table to join students' chance of
admission with research experience.

```
CREATE TABLE research_boost AS \
  SELECT a.student_id as student_id, \
         a.admit_chance as admit_chance, \
         r.research as research \
  FROM admission a \
  LEFT JOIN research r on a.student_id = r.student_id;
```

and another table calculating the average chance of admission for
students with and without research experience:

```
CREATE TABLE research_ave_boost WITH (KAFKA_TOPIC='research_ave_boost', VALUE_FORMAT='AVRO') AS SELECT research, SUM(admit_chance)/COUNT(admit_chance) as ave_chance FROM research_boost GROUP BY research;


```

## Add a connector to sink a KSQL table to s3
note: s3 bucket should be created before run below command
```
curl -X POST -H "Accept:application/json" -H "Content-Type: application/json" \
--data @custom-connectors/connectors/s3-sink.json http://localhost:8083/connectors
```

## Update the source Postgres tables and watch the s3 bucket update



##for MongoDB------------

docker-compose exec mongo1 /usr/bin/mongo --eval 'rs.initiate({_id : "rs0",members:[{ _id : 0, host : "mongo1:27017", priority: 1.0 },{ _id : 1, host : "mongo2:27017", priority: 0.5 }]})'

docker exec -it mongo1 bash

#to start mongo
mongo

use class
db.courses.insert([
{ course_id : 500, course_name : 'Hopper'}
]);

db.colors.find().pretty()





----------------
  CREATE table course_sub AS SELECT courses.course_id as course_id, course_name, subjects.course_id as subject_id, subject_name FROM courses INNER JOIN subjects ON courses.course_id = subjects.subject_id;

  CREATE table chap_sub AS SELECT chapters.chapter_id as chapter_id, chapter_name, subject_id, subchapters.chapter_id as subchapter_id, subchapter_name  FROM chapters INNER JOIN subchapters ON chapters.chapter_id = subchapters.subchapter_id;

  CREATE table class_boost AS SELECT course_id, course_name, chap_sub.subject_id as subject_id, subject_name, chapter_id, chapter_name, subchapter_id, subchapter_name FROM course_sub INNER JOIN chap_sub ON course_sub.course_id = chap_sub.chapter_id;

for the flink cli-------------------------
docker-compose exec sql-client ./sql-client.sh >>

CREATE TABLE subjects(
 subject_id INT,
 subject_name VARCHAR,
 course_id INT
) WITH (
  'connector' = 'kafka',
  'topic' = 'dbserver1.public.subjects',
  'properties.bootstrap.servers' = 'broker0:19092',
  'properties.group.id' = 'test-consumer-group',
  'value.format' = 'json',
  'scan.startup.mode' = 'earliest-offset'
);

CREATE TABLE courses(
 course_id INT,
 course_name VARCHAR
) WITH (
  'connector' = 'kafka',
  'topic' = 'demo.class.courses',
  'properties.bootstrap.servers' = 'broker1:19093',
  'properties.group.id' = 'test-consumer-group',
  'value.format' = 'json',
  'scan.startup.mode' = 'earliest-offset'
);

CREATE TABLE chapters(
 chapter_id INT,
 chapter_name VARCHAR,
 subject_id INT
) WITH (
  'connector' = 'kafka',
  'topic' = 'local.class.chapters',
  'properties.bootstrap.servers' = 'broker2:19094',
  'properties.group.id' = 'test-consumer-group',
  'value.format' = 'json',
  'scan.startup.mode' = 'earliest-offset'
);

CREATE TABLE subchapters(
 subchapter_id INT,
 subchapter_name VARCHAR,
 chapter_id INT
) WITH (
  'connector' = 'kafka',
  'topic' = 'file.subchap',
  'properties.bootstrap.servers' = 'broker0:19092',
  'properties.group.id' = 'test-consumer-group',
  'value.format' = 'json',
  'scan.startup.mode' = 'earliest-offset'
);


CREATE TABLE class_booost(
 course_name VARCHAR,
 subject_name VARCHAR,
 chapter_name VARCHAR,
 subchapter_name VARCHAR
) WITH (
  'connector' = 'kafka',
  'topic' = 'CLASS_BOOOST',
  'properties.bootstrap.servers' = 'broker0:19092',
  'properties.group.id' = 'test-consumer-group',
  'value.format' = 'json'
);

INSERT INTO class_booost



  SELECT courses.course_name as course_name, subjects.subject_name as subject_name, chapters.chapter_name as chapter_name, subchapters.subchapter_name as subchapter_name FROM courses INNER JOIN subjects ON courses.course_id = subjects.course_id INNER JOIN chapters ON subjects.subject_id = chapters.subject_id INNER JOIN subchapters ON chapters.chapter_id = subchapters.chapter_id;

  , globalplay-prod.transactions, globalplay-prod.payment-reports, globalplay-prod.cancel_subscriptions, globalplay-prod.check-ins, globalplay-prod.users, globalplay-prod.promocodes, globalplay-prod.redeem-promocodes, globalplay-prod.consumer-invitations, globalplay-prod.packages, globalplay-prod.roles, globalplay-prod.groups, globalplay-prod.products-checkouts, globalplay-prod.unlimited-location-subscriptions, globalplay-prod.e-gifter-purchased-datas, globalplay-prod.carts, globalplay-prod.fail-subscriptions


funfull.ff.consumers, funfull.ff.consumer_family_members, funfull.ff.consumers_invitations, funfull.ff.transactions, funfull.ff.consumer_devices, funfull.ff.trans_payment_reports, funfull.ff.trans_members, funfull.ff.sign_waivers, funfull.ff.sign_waiver_members, funfull.ff.sign_waiver_agreement, funfull.ff.reedem-promocodes, funfull.ff.redeem-promocodes-members, funfull.ff.payment-reports, funfull.ff.payment-report-invoices, funfull.ff.cancel_subscriptions, funfull.ff.fail_subscriptions, funfull.ff.fail_subscriptions_members, funfull.ff.orders, funfull.ff.promocodes, funfull.ff.unlimited_location_subscriptions, funfull.ff.unlimited_location_subscriptions_members, funfull.ff.unlimited_location_subscriptions_paymentReport, funfull.ff.gift-cards,funfull.ff.products-checkouts, funfull.ff.roles, funfull.ff.redeem_gift_cards, funfull.ff.redeem_gift_cards_receiverDetails,funfull.ff.earn_funfullcash_history, funfull.ff.e_giftcard_purveyors,funfull.ff.send_waivers 
  

funfull.ff.consumers, funfull.ff.consumer_family_members, funfull.ff.transactions, funfull.ff.trans_payment_reports, funfull.ff.trans_members, funfull.ff.sign_waivers, funfull.ff.sign_waiver_members, funfull.ff.sign_waiver_agreement, funfull.ff.redeem_promocodes, funfull.ff.redeem_promocodes_members, funfull.ff.payment_reports, funfull.ff.payment_report_invoices, funfull.ff.cancel_subscriptions, funfull.ff.fail_subscriptions, funfull.ff.fail_subscriptions_members, funfull.ff.orders, funfull.ff.promocodes, funfull.ff.unlimited_location_subscriptions, funfull.ff.unlimited_location_subscriptions_members, funfull.ff.unlimited_location_subscriptions_paymentReport, funfull.ff.gift_cards, funfull.ff.roles, funfull.ff.redeem_gift_cards, funfull.ff.products_checkouts, funfull.ff.products_checkouts_product_detail, funfull.ff.products_checkouts_membership, funfull.ff.products_checkouts_membership_mandatory_product, funfull.ff.products_checkouts_mandatory_product, funfull.ff.carts, funfull.ff.cart_list, funfull.ff.e_gifter_purchased_data, funfull.ff.groups, funfull.ff.check_ins, funfull.ff.checkin_members, funfull.ff.checkin_ticketcodes, funfull.ff.gift_card_deals, funfull.ff.gift_card_deals_giftcards, funfull.ff.kiosks, funfull.ff.location_details, funfull.ff.location_time, funfull.ff.location_surge, funfull.ff.location_additional, funfull.ff.packages, funfull.ff.consumer_invitations, funfull.ff.consumer_invitations_sharedAccess, funfull.ff.suspend_account, funfull.ff.suspend_acnt_memberaddedat, funfull.ff.purchase_gift_cards, funfull.ff.earn_funfullcash_history, funfull.ff.e_giftcard_purveyors,funfull.ff.send_waivers 

  globalplay-prod.redeem-promocodes,globalplay-prod.promocodes,globalplay-prod.gift-cards,globalplay-prod.products-checkouts,globalplay-prod.transactions,globalplay-prod.users,globalplay-prod.carts,globalplay-prod.cancel_subscriptions,globalplay-prod.consumers,globalplay-prod.groups,globalplay-prod.check-ins,globalplay-prod.packages,globalplay-prod.consumer-invitations,globalplay-prod.payment-reports,globalplay-prod.fail-subscriptions,globalplay-prod.orders,globalplay-prod.unlimited-location-subscriptions,globalplay-prod.roles,globalplay-prod.sign-waivers,globalplay-prod.redeem-gift-cards,globalplay-prod.e-gifter-purchased-datas,globalplay-prod.gift-card-deals,globalplay-prod.kiosks,globalplay-prod.send-waivers, globalplay-prod.suspend-consumers, globalplay-prod.purchase-gift-cards, globalplay-prod.earn-globalplaycash-history, globalplay-prod.e-giftcard-purveyors, globalplay-prod.send-waivers


"globalplay-stage.redeem-promocodes,globalplay-stage.promocodes,globalplay-stage.gift-cards,globalplay-stage.products-checkouts,globalplay-stage.transactions,globalplay-stage.users,globalplay-stage.carts,globalplay-stage.cancel_subscriptions,globalplay-stage.consumers,globalplay-stage.groups,globalplay-stage.check-ins,globalplay-stage.packages,globalplay-stage.consumer-invitations,globalplay-stage.payment-reports,globalplay-stage.fail-subscriptions,globalplay-stage.orders,globalplay-stage.unlimited-location-subscriptions,globalplay-stage.roles,globalplay-stage.sign-waivers,globalplay-stage.redeem-gift-cards,globalplay-stage.e-gifter-purchased-datas,globalplay-stage.gift-card-deals,globalplay-stage.kiosks,globalplay-stage.send-waivers, globalplay-stage.suspend-consumers, globalplay-stage.purchase-gift-cards, globalplay-stage.earn-globalplaycash-history, globalplay-stage.e-giftcard-purveyors, globalplay-stage.send-waivers, globalplay-stage.membershipslots"

"funfull.ff.consumers, funfull.ff.consumer_family_members, funfull.ff.transactions, funfull.ff.trans_payment_reports, funfull.ff.trans_members, funfull.ff.sign_waivers, funfull.ff.sign_waiver_members, funfull.ff.sign_waiver_agreement, funfull.ff.redeem_promocodes, funfull.ff.redeem_promocodes_members, funfull.ff.payment_reports, funfull.ff.payment_report_invoices, funfull.ff.cancel_subscriptions, funfull.ff.fail_subscriptions, funfull.ff.fail_subscriptions_members, funfull.ff.orders, funfull.ff.promocodes, funfull.ff.unlimited_location_subscriptions, funfull.ff.unlimited_location_subscriptions_members, funfull.ff.unlimited_location_subscriptions_paymentReport, funfull.ff.gift_cards, funfull.ff.roles, funfull.ff.redeem_gift_cards, funfull.ff.products_checkouts, funfull.ff.products_checkouts_product_detail, funfull.ff.products_checkouts_membership, funfull.ff.products_checkouts_membership_mandatory_product, funfull.ff.products_checkouts_mandatory_product, funfull.ff.carts, funfull.ff.cart_list, funfull.ff.e_gifter_purchased_data, funfull.ff.groups, funfull.ff.check_ins, funfull.ff.checkin_members, funfull.ff.checkin_ticketcodes, funfull.ff.gift_card_deals, funfull.ff.gift_card_deals_giftcards, funfull.ff.kiosks, funfull.ff.location_details, funfull.ff.location_time, funfull.ff.location_surge, funfull.ff.location_additional, funfull.ff.packages, funfull.ff.consumer_invitations, funfull.ff.consumer_invitations_sharedAccess, funfull.ff.suspend_account, funfull.ff.suspend_acnt_memberaddedat, funfull.ff.purchase_gift_cards, funfull.ff.earn_funfullcash_history, funfull.ff.e_giftcard_purveyors,funfull.ff.send_waivers, funfull.ff.membership_slots"